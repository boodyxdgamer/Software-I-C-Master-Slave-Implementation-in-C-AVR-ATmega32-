Software IÂ²C Communication Flow (Master â†” Slave)

ðŸ”§ Initialization
- Master:
  - Sets SDA and SCL as output and drives them HIGH
    â†’ Pull-up resistors simulate idle bus state
- Slave:
  - Sets SDA and SCL as input with internal pull-up
    â†’ Ready to detect start condition

ðŸš¦ Start Condition
- Master pulls SDA LOW
  â†’ Delay
  â†’ Then pulls SCL LOW
    â†’ Signals start of transmission

ðŸ“¤ Sending a Byte (Master Side)
- For each bit:
  â†’ Set SDA to bit value (1 or 0) using bit masking
  â†’ Delay
  â†’ Set SCL HIGH
  â†’ Longer delay (ensures slave reads bit)
  â†’ Set SCL LOW
- Repeat 8 times for full byte

ðŸ“¥ Receiving a Byte (Slave Side)
- Wait for SDA LOW while SCL HIGH
  â†’ Detects start condition
- Enter read loop:
  â†’ For each bit:
    â†’ Wait for SCL to go HIGH
    â†’ Read SDA state and store bit
    â†’ Wait for SCL to go LOW
- After 8 bits, compare with slave address

âœ… Acknowledgment (ACK/NACK)
- If address matches:
  â†’ Slave switches SDA to output, pulls it LOW
  â†’ Delay
  â†’ Switches back to input with pull-up
- Master:
  â†’ Switches SDA to input
  â†’ Reads ACK bit
  â†’ If ACK received â†’ Sends data byte
  â†’ If NACK â†’ Aborts or retries

ðŸ”„ Data Byte Transmission
- Same bit-wise transmission as address
- Slave receives and stores byte
  â†’ Returns to main loop for action

ðŸ›‘ Stop Condition
- Master:
  â†’ Sets SCL HIGH
  â†’ Delay
  â†’ Sets SDA HIGH
    â†’ Signals end of transmission
- Slave:
  â†’ Detects SDA HIGH while SCL HIGH
    â†’ Recognizes STOP
    â†’ Executes preset block of code
    â†’ Waits for next start condition (SDA LOW while SCL HIGH)
//////////////////////////////////////////////////////////////////////////////////////////////
This project showcases a complete software-based IÂ²C implementation in C for AVR microcontrollers, specifically ATmega32. Unlike most resources online, it includes both master and slave logic, built entirely from scratch without relying on hardware IÂ²C modules. The protocol is emulated using GPIO manipulation, precise timing delays, and interrupt-free synchronization.
Key features:
â€¢	Full IÂ²C protocol: Start/Stop conditions, ACK/NACK, byte-level transmission
â€¢	Master and slave roles implemented in pure C
â€¢	GPIO-based bit-banging for SDA and SCL control
â€¢	Proteus simulation setup for validation
â€¢	Designed for educational clarity and low-level protocol understanding

